"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tools_1 = require("graphql-tools");
var graphql_1 = require("graphql");
var subscriptions_transport_ws_1 = require("subscriptions-transport-ws");
var errors_1 = require("./errors");
var NoIntrospection = function (context) { return ({
    Field: function (node) {
        if (node.name.value === '__schema' || node.name.value === '__type') {
            context.reportError(new graphql_1.GraphQLError('GraphQL introspection is not allowed by Apollo Server, but the query contained __schema or __type. To enable introspection, pass introspection: true to ApolloServer in production', [node]));
        }
    },
}); };
var ApolloServerBase = (function () {
    function ApolloServerBase(config) {
        this.graphqlPath = '/graphql';
        this.engineEnabled = false;
        var context = config.context, resolvers = config.resolvers, schema = config.schema, schemaDirectives = config.schemaDirectives, typeDefs = config.typeDefs, introspection = config.introspection, mocks = config.mocks, requestOptions = __rest(config, ["context", "resolvers", "schema", "schemaDirectives", "typeDefs", "introspection", "mocks"]);
        var env = process.env.NODE_ENV;
        var isDev = env !== 'production' && env !== 'test';
        if (typeof introspection === 'boolean')
            this.disableTools = !introspection;
        else
            this.disableTools = !isDev;
        if (this.disableTools) {
            var noIntro = [NoIntrospection];
            requestOptions.validationRules = requestOptions.validationRules
                ? requestOptions.validationRules.concat(noIntro)
                : noIntro;
        }
        this.requestOptions = requestOptions;
        this.context = context;
        this.schema = schema
            ? schema
            : graphql_tools_1.makeExecutableSchema({
                typeDefs: Array.isArray(typeDefs) ? typeDefs.join('\n') : typeDefs,
                schemaDirectives: schemaDirectives,
                resolvers: resolvers,
            });
        if (mocks) {
            graphql_tools_1.addMockFunctionsToSchema({
                schema: this.schema,
                preserveResolvers: true,
                mocks: typeof mocks === 'boolean' ? {} : mocks,
            });
        }
    }
    ApolloServerBase.prototype.use = function (_a) {
        var getHttp = _a.getHttp, path = _a.path;
        this.getHttp = getHttp;
        this.graphqlPath = path;
    };
    ApolloServerBase.prototype.listen = function (opts) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        this.http = this.getHttp();
        var options = __assign({}, opts, { http: __assign({ port: process.env.PORT || 4000 }, opts.http) });
        if (opts.subscriptions !== false) {
            var config = void 0;
            if (opts.subscriptions === true ||
                typeof opts.subscriptions === 'undefined') {
                config = {
                    path: this.graphqlPath,
                };
            }
            else if (typeof opts.subscriptions === 'string') {
                config = { path: opts.subscriptions };
            }
            else {
                config = __assign({ path: this.graphqlPath }, opts.subscriptions);
            }
            this.subscriptionsPath = config.path;
            this.subscriptionServer = this.createSubscriptionServer(this.http, config);
        }
        if (opts.engineProxy || opts.engineInRequestPath)
            this.createEngine(opts);
        return new Promise(function (resolve, reject) {
            if (_this.engineProxy) {
                _this.engineProxy.listen({
                    graphqlPaths: [_this.graphqlPath],
                    port: options.http.port,
                    httpServer: _this.http,
                    launcherOptions: options.engineLauncherOptions,
                }, function () {
                    _this.engineProxy.engineListeningAddress.url = require('url').resolve(_this.engineProxy.engineListeningAddress.url, _this.graphqlPath);
                    resolve(_this.engineProxy.engineListeningAddress);
                });
                _this.engineProxy.on('error', reject);
                return;
            }
            function listenCallback() {
                var listeningAddress = this.http.address();
                var hostForUrl = listeningAddress.address;
                if (listeningAddress.address === '' ||
                    listeningAddress.address === '::')
                    hostForUrl = 'localhost';
                listeningAddress.url = require('url').format({
                    protocol: 'http',
                    hostname: hostForUrl,
                    port: listeningAddress.port,
                    pathname: this.graphqlPath,
                });
                resolve(listeningAddress);
            }
            if (options.http.handle) {
                _this.http.listen(options.http.handle, options.http.backlog, listenCallback.bind(_this));
            }
            else {
                _this.http.listen(options.http, listenCallback.bind(_this));
            }
        });
    };
    ApolloServerBase.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.engineProxy) return [3, 2];
                        return [4, this.engineProxy.stop()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!this.subscriptionServer) return [3, 4];
                        return [4, this.subscriptionServer.close()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!this.http) return [3, 6];
                        return [4, new Promise(function (s) { return _this.http.close(s); })];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2];
                }
            });
        });
    };
    ApolloServerBase.prototype.createSubscriptionServer = function (server, config) {
        var _this = this;
        var onDisconnect = config.onDisconnect, onConnect = config.onConnect, keepAlive = config.keepAlive, path = config.path;
        return subscriptions_transport_ws_1.SubscriptionServer.create({
            schema: this.schema,
            execute: graphql_1.execute,
            subscribe: graphql_1.subscribe,
            onConnect: onConnect
                ? onConnect
                : function (connectionParams) { return (__assign({}, connectionParams)); },
            onDisconnect: onDisconnect,
            onOperation: function (_, connection) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                var context, _a, e_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            connection.formatResponse = function (value) { return (__assign({}, value, { errors: value.errors &&
                                    errors_1.formatApolloErrors(value.errors.slice(), {
                                        formatter: _this.requestOptions.formatError,
                                        debug: _this.requestOptions.debug,
                                        logFunction: _this.requestOptions.logFunction,
                                    }) })); };
                            context = this.context ? this.context : { connection: connection };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 5, , 6]);
                            if (!(typeof this.context === 'function')) return [3, 3];
                            return [4, this.context({ connection: connection })];
                        case 2:
                            _a = _b.sent();
                            return [3, 4];
                        case 3:
                            _a = context;
                            _b.label = 4;
                        case 4:
                            context = _a;
                            return [3, 6];
                        case 5:
                            e_1 = _b.sent();
                            throw errors_1.formatApolloErrors([e_1], {
                                formatter: this.requestOptions.formatError,
                                debug: this.requestOptions.debug,
                                logFunction: this.requestOptions.logFunction,
                            })[0];
                        case 6: return [2, __assign({}, connection, { context: context })];
                    }
                });
            }); },
            keepAlive: keepAlive,
        }, {
            server: server,
            path: path,
        });
    };
    ApolloServerBase.prototype.createEngine = function (_a) {
        var engineInRequestPath = _a.engineInRequestPath, engineProxy = _a.engineProxy;
        var _b = process.env, ENGINE_API_KEY = _b.ENGINE_API_KEY, ENGINE_CONFIG = _b.ENGINE_CONFIG;
        if (engineProxy === false && (ENGINE_API_KEY || ENGINE_CONFIG)) {
            console.warn('engine is set to false when creating ApolloServer but either ENGINE_CONFIG or ENGINE_API_KEY was found in the environment');
        }
        var ApolloEngine;
        if (engineProxy) {
            try {
                ApolloEngine = require('apollo-engine').ApolloEngine;
            }
            catch (e) {
                console.warn("ApolloServer was unable to load Apollo Engine yet engine was configured in the options when creating this ApolloServer? To fix this, run the following command:\n\n  npm install apollo-engine --save\n");
            }
            this.engineProxy = new ApolloEngine(typeof engineProxy === 'boolean' ? undefined : engineProxy);
        }
        if (this.engineProxy || engineInRequestPath)
            this.engineEnabled = true;
    };
    ApolloServerBase.prototype.request = function (request) {
        var _this = this;
        var context = this.context ? this.context : { request: request };
        context =
            typeof this.context === 'function'
                ? function () { return _this.context({ req: request }); }
                : context;
        return __assign({ schema: this.schema, tracing: this.engineEnabled, cacheControl: this.engineEnabled, context: context }, this.requestOptions);
    };
    return ApolloServerBase;
}());
exports.ApolloServerBase = ApolloServerBase;
//# sourceMappingURL=ApolloServer.js.map