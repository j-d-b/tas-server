"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var logging_1 = require("./logging");
var ApolloError = (function (_super) {
    __extends(ApolloError, _super);
    function ApolloError(message, code, properties) {
        var _this = _super.call(this, message) || this;
        _this.name = 'ApolloError';
        Object.setPrototypeOf(_this, ApolloError.prototype);
        if (properties) {
            Object.keys(properties).forEach(function (key) {
                _this[key] = properties[key];
            });
        }
        _this.extensions = { code: code };
        return _this;
    }
    return ApolloError;
}(Error));
exports.ApolloError = ApolloError;
function enrichError(error, debug) {
    if (debug === void 0) { debug = false; }
    var expanded = {};
    Object.defineProperties(expanded, {
        name: {
            value: error.name,
        },
        message: {
            value: error.message,
            enumerable: true,
            writable: true,
        },
        locations: {
            value: error.locations || undefined,
            enumerable: true,
        },
        path: {
            value: error.path || undefined,
            enumerable: true,
        },
        nodes: {
            value: error.nodes || undefined,
        },
        source: {
            value: error.source || undefined,
        },
        positions: {
            value: error.positions || undefined,
        },
        originalError: {
            value: error.originalError,
        },
    });
    expanded.extensions = __assign({}, error.extensions, { code: (error.extensions && error.extensions.code) || 'INTERNAL_SERVER_ERROR', exception: __assign({}, (error.extensions && error.extensions.exception), error.originalError) });
    delete expanded.extensions.exception.extensions;
    if (debug && !expanded.extensions.exception.stacktrace) {
        expanded.extensions.exception.stacktrace =
            (error.originalError &&
                error.originalError.stack &&
                error.originalError.stack.split('\n')) ||
                (error.stack && error.stack.split('\n'));
    }
    if (Object.keys(expanded.extensions.exception).length === 0) {
        delete expanded.extensions.exception;
    }
    return expanded;
}
function toApolloError(error, code) {
    if (code === void 0) { code = 'INTERNAL_SERVER_ERROR'; }
    var err = error;
    if (err.extensions) {
        err.extensions.code = code;
    }
    else {
        err.extensions = { code: code };
    }
    return err;
}
exports.toApolloError = toApolloError;
function fromGraphQLError(error, options) {
    var copy = options && options.errorClass
        ? new options.errorClass(error.message)
        : new ApolloError(error.message);
    Object.keys(error).forEach(function (key) {
        copy[key] = error[key];
    });
    copy.extensions = __assign({}, copy.extensions, error.extensions);
    if (!copy.extensions.code) {
        copy.extensions.code = (options && options.code) || 'INTERNAL_SERVER_ERROR';
    }
    Object.defineProperty(copy, 'originalError', { value: {} });
    Object.getOwnPropertyNames(error).forEach(function (key) {
        Object.defineProperty(copy.originalError, key, { value: error[key] });
    });
    return copy;
}
exports.fromGraphQLError = fromGraphQLError;
var SyntaxError = (function (_super) {
    __extends(SyntaxError, _super);
    function SyntaxError(message) {
        var _this = _super.call(this, message, 'GRAPHQL_PARSE_FAILED') || this;
        Object.setPrototypeOf(_this, SyntaxError.prototype);
        Object.defineProperty(_this, 'name', { value: 'SyntaxError' });
        return _this;
    }
    return SyntaxError;
}(ApolloError));
exports.SyntaxError = SyntaxError;
var ValidationError = (function (_super) {
    __extends(ValidationError, _super);
    function ValidationError(message) {
        var _this = _super.call(this, message, 'GRAPHQL_VALIDATION_FAILED') || this;
        Object.setPrototypeOf(_this, ValidationError.prototype);
        Object.defineProperty(_this, 'name', { value: 'ValidationError' });
        return _this;
    }
    return ValidationError;
}(ApolloError));
exports.ValidationError = ValidationError;
var AuthenticationError = (function (_super) {
    __extends(AuthenticationError, _super);
    function AuthenticationError(message) {
        var _this = _super.call(this, message, 'UNAUTHENTICATED') || this;
        Object.setPrototypeOf(_this, AuthenticationError.prototype);
        Object.defineProperty(_this, 'name', { value: 'AuthenticationError' });
        return _this;
    }
    return AuthenticationError;
}(ApolloError));
exports.AuthenticationError = AuthenticationError;
var ForbiddenError = (function (_super) {
    __extends(ForbiddenError, _super);
    function ForbiddenError(message) {
        var _this = _super.call(this, message, 'FORBIDDEN') || this;
        Object.setPrototypeOf(_this, ForbiddenError.prototype);
        Object.defineProperty(_this, 'name', { value: 'ForbiddenError' });
        return _this;
    }
    return ForbiddenError;
}(ApolloError));
exports.ForbiddenError = ForbiddenError;
function formatApolloErrors(errors, options) {
    if (!options) {
        return errors.map(function (error) { return enrichError(error); });
    }
    var formatter = options.formatter, debug = options.debug, logFunction = options.logFunction;
    var enrichedErrors = errors.map(function (error) { return enrichError(error, debug); });
    if (!formatter) {
        return enrichedErrors;
    }
    return enrichedErrors.map(function (error) {
        try {
            return formatter(error);
        }
        catch (err) {
            logFunction({
                action: logging_1.LogAction.cleanup,
                step: logging_1.LogStep.status,
                data: err,
                key: 'error',
            });
            if (debug) {
                return enrichError(err, debug);
            }
            else {
                var newError = fromGraphQLError(new graphql_1.GraphQLError('Internal server error'));
                return enrichError(newError, debug);
            }
        }
    });
}
exports.formatApolloErrors = formatApolloErrors;
//# sourceMappingURL=errors.js.map