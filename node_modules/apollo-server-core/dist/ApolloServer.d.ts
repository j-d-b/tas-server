/// <reference types="@types/node" />
import { Server as HttpServer } from 'http';
import { GraphQLSchema, GraphQLResolveInfo, ValidationContext } from 'graphql';
import { LogFunction } from './logging';
import { Config, ListenOptions, RegistrationOptions, ServerInfo } from './types';
export declare class ApolloServerBase<Request = RequestInit> {
    disableTools: boolean;
    subscriptionsPath: string;
    private schema;
    private context?;
    private requestOptions;
    private graphqlPath;
    private engineProxy;
    private engineEnabled;
    private http?;
    private subscriptionServer?;
    protected getHttp: () => HttpServer;
    constructor(config: Config<Request>);
    use({getHttp, path}: RegistrationOptions): void;
    listen(opts?: ListenOptions): Promise<ServerInfo>;
    stop(): Promise<void>;
    private createSubscriptionServer(server, config);
    private createEngine({engineInRequestPath, engineProxy});
    request(request: Request): {
        schema: GraphQLSchema;
        formatError?: Function;
        rootValue?: any;
        context: any;
        logFunction?: LogFunction;
        formatParams?: Function;
        validationRules?: ((context: ValidationContext) => any)[];
        formatResponse?: Function;
        fieldResolver?: (source: any, args: {
            [argName: string]: any;
        }, context: any, info: GraphQLResolveInfo) => any;
        debug?: boolean;
        tracing: boolean;
        cacheControl: any;
    };
}
