import { GraphQLError } from 'graphql';
import { LogFunction } from './logging';
export declare class ApolloError extends Error implements GraphQLError {
    extensions: Record<string, any>;
    readonly name: string;
    readonly locations: any;
    readonly path: any;
    readonly source: any;
    readonly positions: any;
    readonly nodes: any;
    originalError: any;
    [key: string]: any;
    constructor(message: string, code?: string, properties?: Record<string, any>);
}
export declare function toApolloError(error: Error & {
    extensions?: Record<string, any>;
}, code?: string): Error & {
    extensions: Record<string, any>;
};
export interface ErrorOptions {
    code?: string;
    errorClass?: typeof ApolloError;
}
export declare function fromGraphQLError(error: GraphQLError, options?: ErrorOptions): ApolloError;
export declare class SyntaxError extends ApolloError {
    constructor(message: string);
}
export declare class ValidationError extends ApolloError {
    constructor(message: string);
}
export declare class AuthenticationError extends ApolloError {
    constructor(message: string);
}
export declare class ForbiddenError extends ApolloError {
    constructor(message: string);
}
export declare function formatApolloErrors(errors: Array<Error>, options?: {
    formatter?: Function;
    logFunction?: LogFunction;
    debug?: boolean;
}): Array<ApolloError>;
